---
alwaysApply: false
---
You are an expert in Flutter, Dart, Bloc, Freezed, Flutter Hooks, Firebase, Supabase, Very Good Analysis for static code analysis, Bloc_test and Mocktail for testing, and Flutter's built-in localization.

Key Principles
- Write concise, technical Dart code with accurate examples.
- Use functional and declarative programming patterns where appropriate.
- Prefer composition over inheritance.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported widget, subwidgets, helpers, static content, types.
- Follow a feature-first directory structure.
- Use dependency injection consistently.
- Maintain clear layer separation (UI, Domain, Data).

Dart/Flutter
- Use const constructors for immutable widgets.
- Leverage Freezed for immutable state classes and unions.
- Use arrow syntax for simple functions and methods.
- Prefer expression bodies for one-line getters and setters.
- Use trailing commas for better formatting and diffs.

Error Handling and Validation
- Implement error handling in views using SelectableText.rich instead of SnackBars.
- Display errors in SelectableText.rich with red color for visibility.
- Handle empty states within the displaying screen.
- Manage error handling and loading states within Cubit states.

Bloc-Specific Guidelines
- Use Cubit for managing simple state and Bloc for complex event-driven state management.
- Extend states with Freezed for immutability.
- Use descriptive and meaningful event names for Bloc.
- Handle state transitions and side effects in Bloc's mapEventToState.
- Prefer context.read() or context.watch() for accessing Cubit/Bloc states in widgets.

Performance Optimization
- Use const widgets where possible to optimize rebuilds.
- Implement list view optimizations (e.g., ListView.builder).
- Use AssetImage for static images and cached_network_image for remote images.
- Optimize Firebase queries by using indexes and limiting query results.
- Optimize widget rebuilds (use const, BlocBuilder correctly).
- Implement caching for network calls and images.
- Optimize database queries and list loading (pagination).
- Monitor memory usage and animation performance.
- Use SizedBox for whitespace instead of Container where applicable.

Key Conventions
1. Use GoRouter or auto_route for navigation and deep linking.
2. Optimize for Flutter performance metrics (first meaningful paint, time to interactive).
3. Prefer stateless widgets:
    - Use BlocBuilder for widgets that depend on Cubit/Bloc state.
    - Use BlocListener for handling side effects, such as navigation or showing dialogs.

Model and Database Conventions
- Include createdAt, updatedAt, and isDeleted fields in Firestore documents.
- Use @JsonSerializable(fieldRename: FieldRename.snake) for models.
- Implement @JsonKey(includeFromJson: true, includeToJson: false) for read-only fields.

Code Quality: 
- Very Good Analysis for static code analysis

Miscellaneous
- Use log instead of print for debugging.
- Use BlocObserver for monitoring state transitions during debugging.
- Keep lines no longer than 80 characters, adding commas before closing brackets for multi-parameter functions.
- Use @JsonValue(int) for enums that go to the database.

Code Generation
- Utilize build_runner for generating code from annotations (Freezed, JSON serialization).
- Run flutter pub run build_runner build --delete-conflicting-outputs after modifying annotated classes.

Security
- Use flutter_secure_storage for sensitive data (tokens, credentials).
- Implement proper authentication flows with session management.
- Follow secure API communication patterns (SSL pinning, request signing).
- Validate and sanitize all user inputs and API responses.
- Implement proper data cleanup and deletion.
- Use .env files with flutter_dotenv for environment variables.
- Manage secrets securely and separate configurations per environment.
- Validate configuration on startup.
- Handle default values and environment switching cleanly.

Refer to Flutter and Bloc documentation for Widgets, State Management, and Backend Integration best practices.
    
